from PIL import Image
from cryptography.fernet import Fernet
import base64

# Function to generate a key from a password
def generate_key(password):
    """Generate a key from a password."""
    return base64.urlsafe_b64encode(password.ljust(32).encode('utf-8')[:32])

# Encrypt data
def encrypt_data(data, password):
    """Encrypt data using a password."""
    key = generate_key(password)
    f = Fernet(key)
    encrypted = f.encrypt(data.encode())
    return encrypted

# Decrypt data
def decrypt_data(encrypted_data, password):
    """Decrypt data using a password."""
    key = generate_key(password)
    f = Fernet(key)
    decrypted = f.decrypt(encrypted_data).decode()
    return decrypted

# Convert encoding data into 8-bit binary form using ASCII value of characters
def gen_data(data):
    """Convert data into 8-bit binary form."""
    return [format(ord(char), '08b') for char in data]

# Modify pixels according to the 8-bit binary data
def mod_pix(pix, data):
    """Modify pixels according to the binary data."""
    data_list = gen_data(data)
    data_len = len(data_list)
    im_data = iter(pix)

    for i in range(data_len):
        pix = [value for value in im_data._next_()[:3] +
                                im_data._next_()[:3] +
                                im_data._next_()[:3]]

        for j in range(0, 8):
            if (data_list[i][j] == '0' and pix[j] % 2 != 0):
                pix[j] -= 1
            elif (data_list[i][j] == '1' and pix[j] % 2 == 0):
                if pix[j] != 0:
                    pix[j] -= 1
                else:
                    pix[j] += 1

        if (i == data_len - 1):
            if (pix[-1] % 2 == 0):
                if pix[-1] != 0:
                    pix[-1] -= 1
                else:
                    pix[-1] += 1
        else:
            if (pix[-1] % 2 != 0):
                pix[-1] -= 1

        pix = tuple(pix)
        yield pix[0:3]
        yield pix[3:6]
        yield pix[6:9]

def encode_enc(new_img, data):
    """Encode data into an image."""
    width = new_img.size[0]
    (x, y) = (0, 0)

    for pixel in mod_pix(new_img.getdata(), data):
        new_img.putpixel((x, y), pixel)
        if (x == width - 1):
            x = 0
            y += 1
        else:
            x += 1

# Encode data into image
def encode():
    """Encode data into an image."""
    img_name = input("Enter image name (with extension): ")
    image = Image.open(img_name, 'r')

    data = input("Enter data to be encoded: ")
    password = input("Enter password for encryption: ")
    if len(data) == 0:
        raise ValueError('Data is empty')

    encrypted_data = encrypt_data(data, password)
    new_img = image.copy()
    encode_enc(new_img, encrypted_data.decode())

    new_img_name = input("Enter the name of the new image (with extension): ")
    new_img.save(new_img_name)  # Automatically handles the format based on the file extension
    print(f"\nImage successfully saved as {new_img_name}\n")

# Decode the data in the image
def decode():
    """Decode the data in an image."""
    img_name = input("Enter image name (with extension): ")
    image = Image.open(img_name, 'r')

    encrypted_data = bytearray()
    img_data = iter(image.getdata())

    while True:
        pixels = [value for value in img_data._next_()[:3] +
                                  img_data._next_()[:3] +
                                  img_data._next_()[:3]]

        bin_str = ''
        for i in pixels[:8]:
            if i % 2 == 0:
                bin_str += '0'
            else:
                bin_str += '1'

        encrypted_data.append(int(bin_str, 2))

        if pixels[-1] % 2 != 0:
            break

    password = input("Enter password for decryption: ")
    try:
        decrypted_data = decrypt_data(bytes(encrypted_data), password)
    except Exception as e:
        print(f"Decryption failed: {e}")
        return None
    return decrypted_data

# Main Function
def main():
    """Main function."""
    print("| Steganography |")
    print("|------|-------|")
    while True:
        choice = input("\n1. Encode\n2. Decode\n3. Quit\n\nEnter your choice: ")
        if choice == "1":
            encode()
        elif choice == "2":
            decoded_data = decode()
            if decoded_data is not None:
                print("Decoded data: " + decoded_data)
        elif choice == "3":
            quit_choice = input("Quitting... Do you want to proceed? (y/n): ")
            if quit_choice.lower() == 'y':
                print("Goodbye!")
                break
            else:
                print("Returning to the menu...")
        else:
            print("Invalid choice. Please try again.")

# Driver Code
if _name_ == '_main_':
    main()